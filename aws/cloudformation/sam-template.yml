AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Blueprint for SAM using Twirp and on-demand DynamoDB.  Single lambda serves entire API via proxy+.
  Supports CORS from ALL origins

Parameters:
  StageName:
    Type: String
    Description: The stage name, also the lambda alias
    Default: test
  CreateCloudFront:
    Description: Create CloudFront? May not want to wait 30 mins for CDN creation when testing
    Type: String
    Default: false
    ConstraintDescription: Only true or false are allowed
    AllowedValues:
      - true
      - false   
  AcmCertificateArn:
    Description: The ARN of a certificate from AWS Certificate Manager (ACM)
    Type: String
    Default: arn:aws:acm:us-east-1:xxx:certificate/yyy
  CloudFrontCname:
    Description: Custom domain name to use (foo.yourdomain.com). Must be hosted in route53.  Will prefix this with [Stage]--
    Type: String
    Default: blah.yourdomain.com
    AllowedPattern : (([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.){2,}([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]){2,}
    ConstraintDescription : Must be a valid DNS zone name WITHOUT trailing period
  VerifyFromCfHeaderVal:
    Description: A custom header X-From-CDN with val below be passed to your orgin, to verify request came through CDN
    Type: String       
    Default: someSecret
  DDBTableName:
    Type: String
    Description: DDB_TABLENAME env var
    Default: test-SingleTable
  SSMFirebaseAdminSdkCreds:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: The SSM parameter key for FBase Admin SDK creds
    Default: /stage/repo_name/branch/envs/GOOGLE_APPLICATION_CREDENTIALS_JSON
  SSMJwtSecret:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: The SSM parameter key for generating JWT platform tokens
    Default: /stage/repo_name/branch/envs/JWT_SECRET_KEY    

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: go1.x
    AutoPublishAlias: !Ref StageName
    DeploymentPreference:
      Type: AllAtOnce
    Timeout: 30
    MemorySize: 128
  Api: # https://alexharv074.github.io/2019/03/31/introduction-to-sam-part-iii-adding-a-proxy-endpoint-and-cors-configuration.html#cors-configuration
    Cors:
      AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
      MaxAge: "'600'"
    BinaryMediaTypes:
      - application~1protobuf
    # Logging, Metrics, Throttling, and all other Stage settings
    MethodSettings: [{
        "LoggingLevel": "INFO",
        "MetricsEnabled": True,
        "DataTraceEnabled": True,

        # On all Paths & methods
        "ResourcePath": "/*",
        "HttpMethod": "*",
    }]  

Conditions:   
  NotStaging: !Not [!Equals [ !Ref StageName, staging ]]
  IsLocal: !Equals [ !Ref StageName, local ]
  IsProd: !Equals [ !Ref StageName, prod ]
  CreateCDN: !Equals [!Ref CreateCloudFront, true]
  #If resources are in a seperate file with naming convention [stage]--[repo]--[branch]--[eyecatcher]--r 
  #the following line would exist in said resources file
  #NotStaging: !Not [!Equals [ !Select [ "0", !Split [ '--', !Ref 'AWS::StackName' ] ], staging ]]

Resources:
  APIG:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Variables:
        Stage: !Ref StageName
#TODO: add Tags when supported https://github.com/awslabs/serverless-application-model/issues/384

#### Cloudfront and DNS stuff
  CloudFront:  
    Type: AWS::CloudFront::Distribution
    Condition: CreateCDN
    DependsOn: APIG
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Comment: !Join [ '', [!Ref 'AWS::StackName', ' API CloudFront']]
        Aliases: 
          - !Sub ${StageName}--${CloudFrontCname}
          - !If [IsProd, !Ref CloudFrontCname, !Ref "AWS::NoValue"]
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
        Origins:
        - Id: APIGOrigin
          DomainName: !Sub ${APIG}.execute-api.${AWS::Region}.amazonaws.com
          OriginPath: !Sub /${StageName}
          CustomOriginConfig:
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
          OriginCustomHeaders:
            - HeaderName: 'X-From-CDN'
              HeaderValue: !Ref VerifyFromCfHeaderVal
        DefaultCacheBehavior:
          AllowedMethods: ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
          CachedMethods: ["GET", "HEAD", "OPTIONS"]
          ForwardedValues:
            Headers:
            - Access-Control-Request-Headers
            - Access-Control-Request-Method
            - Origin
            - Authorization
            - Accept
            # - Host APIG needs to use SNI
            QueryString: false
            # TODO:
            Cookies:
              Forward: whitelist
              WhitelistedNames: 
              - platform-token-header-payload
              - platform-token-sig
          TargetOriginId: APIGOrigin
          ViewerProtocolPolicy: https-only
          Compress: true
          DefaultTTL: 0
        CustomErrorResponses:
        - ErrorCachingMinTTL: 0
          ErrorCode: 400
        - ErrorCachingMinTTL: 1
          ErrorCode: 403
        - ErrorCachingMinTTL: 5
          ErrorCode: 500
  DNSARecord:    
    Type: AWS::Route53::RecordSet
    Condition: CreateCDN
    Properties:
      Comment: !Ref 'AWS::StackName'
      Name: !Sub ${StageName}--${CloudFrontCname}        
      Type: A
      HostedZoneName: !Join ['.', [ !Select [1, !Split ['.', !Ref CloudFrontCname]], !Select [2, !Split ['.', !Ref CloudFrontCname]], '']]
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFront.DomainName
  DNSAAAARecord:    
    Type: AWS::Route53::RecordSet
    Condition: CreateCDN
    Properties:
      Comment: !Ref 'AWS::StackName'
      Name: !Sub ${StageName}--${CloudFrontCname}
      Type: AAAA
      HostedZoneName: !Join ['.', [ !Select [1, !Split ['.', !Ref CloudFrontCname]], !Select [2, !Split ['.', !Ref CloudFrontCname]], '']]
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFront.DomainName

  DDBTable: 
    Type: AWS::DynamoDB::Table
    # Staging uses prod table, so don't create if staging
    Condition: NotStaging
    Properties: 
      TableName: !Ref DDBTableName
      Tags: 
        - 
          Key: Stage
          Value: !Ref StageName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "PK"
          AttributeType: "S"
        - 
          AttributeName: "SK"
          AttributeType: "S"
        - 
          AttributeName: "GSI1PK"
          AttributeType: "S"
        - 
          AttributeName: "GSI1SK"
          AttributeType: "S"          
      KeySchema: 
        - 
          AttributeName: "PK"
          KeyType: "HASH"
        - 
          AttributeName: "SK"
          KeyType: "RANGE"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "GSI1"
          KeySchema: 
            - 
              AttributeName: "GSI1PK"
              KeyType: "HASH"
            - 
              AttributeName: "GSI1SK"
              KeyType: "RANGE"              
          Projection: 
            ProjectionType: "ALL"      

  MonolithicFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}--Monolithic"
      Handler: api
      #sam and aws cloudformation packag cmds set their CWD wherever sam-template.yml is 
      CodeUri: ../../build
      Description: !Sub "${StageName}: Twirp API"
      Tags: 
        Stage: !Ref StageName      
      Environment:
        Variables:
          # Keep these in sync with dotenv.example
          APP_STAGE: !Ref StageName
          DDB_TABLENAME: !Ref DDBTableName
          GOOGLE_APPLICATION_CREDENTIALS_JSON: !Ref SSMFirebaseAdminSdkCreds
          JWT_SECRET_KEY: !Ref SSMJwtSecret
          VERIFY_FROM_CDN_HEADER_VAL: !Ref VerifyFromCfHeaderVal

      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Batch*"
                - "dynamodb:Describe*"
                - "dynamodb:Get*"
                - "dynamodb:Query"
                - "dynamodb:Scan"
                - "dynamodb:DeleteItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:PutItem"
              Resource: !Sub "arn:aws:dynamodb:*:*:table/${DDBTableName}"
      Events:
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref APIG
            Path: /{proxy+}
            Method: ANY

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiGatewayEndpt:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${APIG}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
  CloudFront:
    Description: CloudFront ID
    Condition: CreateCDN
    Value: !Ref CloudFront
  CNAME:
    Description: Custom domain for Cloudfront
    Condition: CreateCDN
    Value: !Ref DNSARecord
  AppURL:
    Description: App URL
    Condition: CreateCDN
    Value: !Sub
        - https://${DN}
        - { DN: !Ref DNSARecord }        
